from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from database import add_user, CYRILLIC_NAME_REGEX, PHONE_REGEX
from keyboards.keyboards import main_menu

class RegistrationState(StatesGroup):
    full_name = State()
    phone_number = State()

welcome_message_text = "‚úàÔ∏è <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞ –£–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ \"–£–≠–†-–Æ–ì\". " \
                        "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ " \
                        "–ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–º–æ–º. –ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ <b>–º–µ–Ω—é</b>, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å " \
                        "—Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:"
full_name_mismatch_error = "‚õîüëë <b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—è</b> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª, –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å " \
                           "–Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—É. –¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã. <b>–£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>"

phone_number_mismatch_error = "‚õîüëë‚õî <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ " \
                              "—Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ <b>+7. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>"
router = Router()
@router.message(RegistrationState.full_name)
async def process_full_name_registration(message: Message, state: FSMContext) -> None:
    if not CYRILLIC_NAME_REGEX.match(message.text):
        await message.answer(full_name_mismatch_error, parse_mode="HTML")
        return
    await state.update_data(full_name = message.text)
    await state.set_state(RegistrationState.phone_number)
    text = "üìû –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> —á–µ—Ä–µ–∑ <b>+7</b> —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
    await message.answer(text, parse_mode="HTML")

@router.message(RegistrationState.phone_number)
async def process_phone_number_registration(message: Message, state: FSMContext) -> None:
    if not PHONE_REGEX.match(message.text):
        await message.answer(phone_number_mismatch_error, parse_mode="HTML")
        return
    await state.update_data(phone_number = message.text)
    await state.set_state(RegistrationState.phone_number)
    data = await state.get_data()
    await add_user(message.from_user.id, data['full_name'], data['phone_number'])
    await state.clear()
    await message.answer(welcome_message_text, reply_markup=main_menu(), parse_mode="HTML")
