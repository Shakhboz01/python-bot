from aiogram import Router, F
from aiogram.types import CallbackQuery
from config import CALLBACK_REQUESTS_GROUP_ID
from database import close_tickets, get_user
from keyboards.keyboards import (
    ask_if_phone_number_is_correct,
    close_dialog_keyboard,
    main_menu,
    skip_step_1_keyboard,
    skip_step_2_keyboard,
    step_3_keyboard,
)
from aiogram.fsm.context import FSMContext
from states.account_settings_state import AccountSettingsState
from states.chat_with_admin_state import ChatWithAdminState
from states.suggestion_state import SuggestionState
from states.request_form_submission_state import RequestFormSubmissionState
from texts import first_step_text, second_step_text, third_step_text

router = Router()

@router.callback_query(F.data == "change_name")
async def change_name_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üõ†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    await callback.answer()
    await state.set_state(AccountSettingsState.full_name)

@router.callback_query(F.data == "change_number")
async def change_number_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üõ†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    await callback.answer()
    await state.set_state(AccountSettingsState.phone_number)

@router.callback_query(F.data == 'make_sugestion')
async def make_suggestion(callback: CallbackQuery, state: FSMContext):
    text = "<b>üí°–†–∞—Å–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ " \
           "–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö: (–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å)</b>"
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()
    await state.set_state(SuggestionState.suggestion)

@router.callback_query(F.data == 'request_form_submission')
async def request_form_submission(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(first_step_text, reply_markup=skip_step_1_keyboard(), parse_mode="HTML")
    await callback.answer()
    await state.set_state(RequestFormSubmissionState.address)

@router.callback_query(F.data == 'skip_request_form_submission_step_1')
async def skip_request_form_submission_step_1(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(second_step_text, reply_markup=skip_step_2_keyboard(), parse_mode="HTML")
    await callback.answer()
    await state.set_state(RequestFormSubmissionState.media_image)

@router.callback_query(F.data == 'skip_request_form_submission_step_2')
async def skip_request_form_submission_step_2(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(third_step_text, reply_markup=step_3_keyboard(), parse_mode="HTML")
    await callback.answer()
    await state.set_state(RequestFormSubmissionState.subject)

@router.callback_query(F.data == "go_back_to_main")
async def go_back_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()

@router.callback_query(F.data == "call_me")
async def call_me_callback(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    text = f"<b>–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {user["phone_number"]}?</b> " \
           f"–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, <b>–µ—Å–ª–∏ –Ω–µ—Ç,</b> –≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å"
    await callback.message.answer(text, reply_markup=ask_if_phone_number_is_correct(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "send_callback_request_notification")
async def send_callback_request_notification(callback: CallbackQuery):
    user = await get_user(callback.from_user.id)
    text = "‚úÖ<b>–û—Ç–ª–∏—á–Ω–æ!</b> –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    await callback.message.answer(text, parse_mode="HTML", reply_markup=main_menu())
    await callback.answer()
    # Send notification to the admin
    await callback.message.bot.send_message(CALLBACK_REQUESTS_GROUP_ID, f"üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç—å –µ–º—É. {user['phone_number']}")

@router.callback_query(F.data == "chat_bot")
async def chat_bot_callback(callback: CallbackQuery, state = FSMContext):
    text = "‚úÖ‚úÖüìû –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ '–£–≠–†-–Æ–ì', –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞–π—Ç–µ."
    await callback.message.answer(text=text, reply_markup=close_dialog_keyboard())
    await callback.answer()
    await state.set_state(ChatWithAdminState.message)

@router.callback_query(F.data == "close_dialog")
async def close_dialog_callback(callback: CallbackQuery, state= FSMContext):
    await callback.message.answer("‚ùåüìû<b>–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω...<b/>", parse_mode='HTML')
    await callback.answer()
    await state.clear()
    await close_tickets(callback.from_user.id)
