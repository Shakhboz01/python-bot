from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from admin.keyboads import ticket_actions_keyboard, unsolved_tickets_keyboard
from admin.states.admin_chat_state import AdminChatState
from database import connect_db, get_chats
from middlewares.admin_check import AdminCheckMiddleware

router = Router()
router.message.middleware(AdminCheckMiddleware())

@router.message(F.text.lower() == '–Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã')
async def show_unsolved_tickets(message: Message):
    db = await connect_db()
    tickets = await db.fetch("SELECT id, user_id FROM tickets WHERE solved = FALSE")
    await db.close()

    if not tickets:
        await message.answer("‚úÖ –ù–µ—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await message.answer("üìù –ù–µ—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:", reply_markup=unsolved_tickets_keyboard(tickets))

@router.callback_query(F.data.startswith("ticket:"))
async def ticket_actions(callback: CallbackQuery):
    ticket_id = int(callback.data.split(":")[1])
    await callback.message.answer(
        f"Ticket #{ticket_id} Actions:",
        reply_markup=ticket_actions_keyboard(ticket_id)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("mark_solved:"))
async def mark_ticket_solved(callback: CallbackQuery):
    ticket_id = int(callback.data.split(":")[1])
    db = await connect_db()
    await db.execute("UPDATE tickets SET solved = TRUE WHERE id = $1", ticket_id)
    await db.close()

    await callback.message.answer(f"‚úÖ –¢–∏–∫–µ—Ç #{ticket_id} –±—ã–ª –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π.")
    await callback.answer()


@router.callback_query(F.data.startswith("show_chats:"))
async def show_ticket_chats(callback: CallbackQuery, state: FSMContext):
    ticket_id = int(callback.data.split(":")[1])
    db = await connect_db()
    chats = await get_chats(ticket_id)
    await db.close()

    if not chats:
        await callback.message.answer("üí¨ –ß–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        return

    # Display all chats
    chat_history = "\n".join(
        [f"{'üë§ User' if chat['incoming'] else 'üõ† Admin'}: {chat['message']}" for chat in chats]
    )
    await callback.message.answer(f"üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ #{ticket_id}:\n\n{chat_history}")

    # Set FSM state for sending a message
    await state.update_data(ticket_id=ticket_id)
    await state.set_state(AdminChatState.sending_message)
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await callback.answer()
